<?php
/**
 * @file
 * Patch manager provides developers with tools for managing patches.
 */

/**
 * Implementation of hook_entity_info().
 */
function patch_manager_entity_info() {
  $entities = array();
  $entities['patch_manager_metaobject'] = array(
    'label' => t('Metaobject'),
    'entity class' => 'Metaobject',
    'controller class' => 'MetaobjectController',
    'base table' => 'patch_manager_metaobject',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'name',
      'label' => 'label',
      'bundle' => 'type',
    ),
    // Bundles are defined below.
    'bundles' => array(),
    // Bundle keys tell the FieldAPI how to extract information from the bundle objects.
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'module' => 'patch_manager',
    'admin ui' => array(
      'controller class' => 'MetaobjectUIController',
      'path' => 'admin/structure/metaobjects',
      'menu wildcard' => '%patch_manager_metaobject',
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => FALSE,
      ),
    ),
    'static cache' => TRUE,
    'configuration' => TRUE,
    'exportable' => TRUE,
    'export' => array(
      'default hook' => 'default_metaobject_configuration',
    ),
    'access callback' => 'patch_manager_metaobject_access',
    'features controller class' => 'MetaobjectFeaturesController',
  );
  // The entity that holds information about the entity types.
  $entities['patch_manager_metaobject_type'] = array(
    'label' => t('Metaobject Type'),
    'entity class' => 'MetaobjectType',
    'controller class' => 'MetaobjectTypeController',
    'base table' => 'patch_manager_metaobject_type',
    'fieldable' => TRUE,
    'bundle of' => 'patch_manager_metaobject',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    //'label callback' => 'entity_class_label',
    //'uri callback' => 'entity_class_uri',
    'creation callback' => 'patch_manager_metaobject_type_create',
    'access callback' => 'patch_manager_metaobject_type_access',
    'module' => 'patch_manager',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/metaobject_types',
      //'file' => 'metaobject_type.admin.inc',
      'controller class' => 'MetaobjectTypeUIController',
      'menu wildcard' => '%patch_manager_metaobject_type',
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => FALSE,
      ),
    ),
    //'metadata controller class' => 'EntityformTypeMetadataController',
  );
  return $entities;
}

/**
 * Implements hook_entity_info_alter().
 *
 * We are adding the info about the entityform types via a hook to avoid a recursion
 * issue as loading the entityform types requires the entity info as well.
 */
function patch_manager_entity_info_alter(&$entity_info) {
  foreach (patch_manager_get_types() as $type => $bundle) {
    $entity_info['patch_manager_metaobject']['bundles'][$type] = array(
      'label' => $bundle->label,
      'admin' => array(
        'path' => 'admin/structure/metaobject_types/manage/%patch_manager_metaobject_type',
        'real path' => 'admin/structure/metaobject_types/manage/' . $type,
        'bundle argument' => 4,
        //'access arguments' => array('administer metaobject types'),
      ),
    );
  }
}

function patch_manager_get_types($type_name = NULL, $reset = FALSE) {
  // entity_load will get the Entity controller for our entityform entity and call the load
  // function of that object - we are loading entities by name here.
  $types = entity_load_multiple_by_name('patch_manager_metaobject_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
  /* @todo Remove it.
  $metaobject_types = &drupal_static(__FUNCTION__);
  if (!isset($metaobject_types)) {
    $metaobject_types = array();
  }
  elseif ($reset) {
    unset($metaobject_types[$type_name]);
  }
  if (empty($metaobject_types) || (isset($type_name) && empty($metaobject_types[$type_name]))) {
    if (!isset($type_name)) {
      $metaobject_types = entity_load_multiple_by_name('patch_manager_metaobject_type', FALSE);
    }
    else {
      $types = entity_load_multiple_by_name('patch_manager_metaobject_type', array($type_name));
      if (empty($types)) {
        return FALSE;
      }
      $metaobject_types[$type_name] = array_shift($types);
    }
  }
  return isset($type_name) ? $metaobject_types[$type_name] : $metaobject_types;
   *
   */
}

// @todo Implement real entity controllers.
class MetaobjectController extends EntityAPIControllerExportable {}
class Metaobject extends Entity {}
class MetaobjectUIController extends EntityDefaultUIController {}
class MetaobjectTypeController extends EntityAPIControllerExportable {}
class MetaobjectType extends Entity {}
class MetaobjectTypeUIController extends EntityDefaultUIController {
  /**
   * Overrides hook_menu() defaults.
   */
  public function hook_menu() {
    $items = parent::hook_menu();
    $items[$this->path]['description'] = 'Manage metaobject entity types, including adding and removing fields and the display of fields.';
    $items[$this->path]['type'] = MENU_NORMAL_ITEM;
    $items[$this->path . '/manage/%metaobject_type/edit']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
    return $items;
  }
}

/**
 * Create a metaobject type object.
 */
function patch_manager_metaobject_type_create($values = array()) {
  return entity_get_controller('patch_manager_metaobject_type')->create($values);
}

/**
 * Implements hook_default_metaobject_configuration().
 */
function patch_manager_default_metaobject_configuration() {
  // @todo Create default meta configuration.
  $meta_object_configs = array();
  return $meta_object_configs;
}

function patch_manager_metaobject_access() {
  // @todo Implement better access handling.
  return TRUE;
}

function patch_manager_metaobject_type_access() {
  // @todo Implement better access handling.
  return TRUE;
}

/**
* Generates the metaobject editing form.
*/
function patch_manager_metaobject_form($form, &$form_state, $metaobject, $op = 'edit') {
  if ($op == 'clone') {
    $metaobject->label .= ' (cloned)';
    $metaobject->name .= '_clone';
  }
  $form['label'] = array(
    '#title' => t('Label'),
    '#type' => 'textfield',
    '#default_value' => isset($metaobject->label) ? $metaobject->label : '',
  );
  // Machine-readable application id.
  $form['name'] = array(
    '#type' => 'machine_name',
    '#default_value' => isset($metaobject->name) ? $metaobject->name : '',
    // @todo ?Do we need it?
    //'#disabled' => $application->isLocked(),
    '#machine_name' => array(
      'exists' => 'patch_manager_get_metaobjects',
      'source' => array('label'),
    ),
    '#description' => t('A unique machine-readable name for this metaobject. It must only contain lowercase letters, numbers, and underscores.'),
  );
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save metaobject'),
    '#weight' => 40,
  );
  return $form;
}

/**
* Generates the metaobject type editing form.
*/
function patch_manager_metaobject_type_form($form, &$form_state, $metaobject_type, $op = 'edit') {
  if ($op == 'clone') {
    $metaobject_type->label .= ' (cloned)';
    $metaobject_type->name .= '_clone';
  }
  $form['label'] = array(
    '#title' => t('Label'),
    '#type' => 'textfield',
    '#default_value' => isset($metaobject_type->label) ? $metaobject_type->label : '',
  );
  // Machine-readable application id.
  $form['type'] = array(
    '#type' => 'machine_name',
    '#default_value' => isset($metaobject_type->type) ? $metaobject_type->type : '',
    // @todo ?Do we need it?
    //'#disabled' => $application->isLocked(),
    '#machine_name' => array(
      'exists' => 'patch_manager_get_metaobject_types',
      'source' => array('label'),
    ),
    '#description' => t('A unique machine-readable name for this metaobject type. It must only contain lowercase letters, numbers, and underscores.'),
  );
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save metaobject type'),
    '#weight' => 40,
  );
  return $form;
}

function patch_manager_get_metaobjects($metaobject_name = NULL) {
  // @todo Implement existence check.
  return array();
}

function patch_manager_get_metaobject_types($metaobject_type_name = NULL) {
  // @todo Implement existence check.
  return array();
}

/**
* Form API submit callback for the metaobject form.
*/
function patch_manager_metaobject_form_submit(&$form, &$form_state) {
  $metaobject = entity_ui_form_submit_build_entity($form, $form_state);
  // Save and go back.
  $metaobject->save();
  $form_state['redirect'] = 'admin/structure/metaobjects';
}

/**
* Form API submit callback for the metaobject type form.
*/
function patch_manager_metaobject_type_form_submit(&$form, &$form_state) {
  $metaobject_type = entity_ui_form_submit_build_entity($form, $form_state);
  // Save and go back.
  $metaobject_type->save();
  $form_state['redirect'] = 'admin/structure/metaobject_types';
}

/**
 * Menu argument loader; Load a entityform type by string.
 *
 * @param $type
 *   The machine-readable name of a entityform type to load.
 * @return
 *   A entityform type array or FALSE if $type does not exist.
 */
function patch_manager_metaobject_type_load($type, $reset = FALSE) {
  $type = str_replace('-', '_', $type);
  return patch_manager_get_types($type, $reset);
}
