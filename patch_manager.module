<?php
/**
 * @file
 * Patch manager provides developers with tools for managing patches.
 */

/**
 * Implementation of hook_entity_info().
 */
function patch_manager_entity_info() {
  $entities = array();
  $entities['patch_manager_metaobject'] = array(
    'label' => t('Metaobject'),
    'entity class' => 'Metaobject',
    'controller class' => 'MetaobjectController',
    'base table' => 'patch_manager_metaobject',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'name',
      'label' => 'label',
      'bundle' => 'type',
    ),
    // Bundles are defined below.
    'bundles' => array(),
    // Bundle keys tell the FieldAPI how to extract information from the bundle objects.
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'module' => 'patch_manager',
    'admin ui' => array(
      'controller class' => 'MetaobjectUIController',
      'path' => 'admin/structure/metaobjects',
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => FALSE,
      ),
    ),
    'static cache' => TRUE,
    'configuration' => TRUE,
    'exportable' => TRUE,
    'access callback' => 'patch_manager_metaobject_access',
    // @todo Remove it.
    //'features controller class' => 'MetaobjectFeaturesController',
  );
  // The entity that holds information about the entity types.
  $entities['patch_manager_metaobject_type'] = array(
    'label' => t('Metaobject Type'),
    'entity class' => 'MetaobjectType',
    'controller class' => 'MetaobjectTypeController',
    'base table' => 'patch_manager_metaobject_type',
    'fieldable' => TRUE,
    'bundle of' => 'patch_manager_metaobject',
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    // Bundle keys tell the FieldAPI how to extract information from the bundle objects.
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    //'label callback' => 'entity_class_label',
    //'uri callback' => 'entity_class_uri',
    //'creation callback' => 'patch_manager_metaobject_type_create',
    'module' => 'patch_manager',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/metaobject_types',
      //'file' => 'metaobject_type.admin.inc',
      'controller class' => 'MetaobjectTypeUIController',
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => FALSE,
      ),
    ),
    'static cache' => TRUE,
    'configuration' => TRUE,
    'exportable' => TRUE,
    'access callback' => 'patch_manager_metaobject_type_access',
    // @todo Remove it.
    //'features controller class' => 'MetaobjectTypeFeaturesController',
    //'metadata controller class' => 'EntityformTypeMetadataController',
  );
  return $entities;
}

/**
 * Implements hook_entity_info_alter().
 *
 * We are adding the info about the metaobject types via a hook to avoid a recursion
 * issue as loading the entityform types requires the entity info as well.
 *\/ @todo Remove it: though it requires patch from http://drupal.org/node/1332004
function patch_manager_entity_info_alter(&$entity_info) {
  foreach (patch_manager_get_metaobject_types() as $type => $bundle) {
    $entity_info['patch_manager_metaobject']['bundles'][$type] = array(
      'label' => $bundle->label,
      'admin' => array(
        'path' => 'admin/structure/metaobject_types/manage/%entity_type',
        'real path' => 'admin/structure/metaobject_types/manage/' . $type,
        'bundle argument' => 4,
        'access arguments' => array('administer metaobjects'),
      ),
    );
  }
}
 *
 */

/**
 * Implements hook_permission().
 */
function patch_manager_permission() {
  $permissions = array(
    'administer metaobjects' => array(
      'title' => t('Administer metaobjects'),
      'description' => t('Create and delete fields for metaobject types.'),
    ),
  );
  return $permissions;
}

// @todo Implement real entity controllers.
class MetaobjectController extends EntityAPIControllerExportable {}
class Metaobject extends Entity {}
class MetaobjectUIController extends EntityBundlesUIController {
  /**
   * Overrides overviewTableHeaders().
   */
  protected function overviewTableHeaders($conditions, $rows, $additional_header = array()) {
    $header = parent::overviewTableHeaders($conditions, $rows, $additional_header);
    // Insert column as second for metaobject type.
    $first = array_shift($header);
    array_unshift($header, t('Metaobject type'));
    array_unshift($header, $first);
    return $header;
  }

  protected function overviewTableRow($conditions, $id, $entity, $additional_cols = array()) {
    $row = parent::overviewTableRow($conditions, $id, $entity, $additional_cols);
    // Insert column as second for metaobject type.
    $first = array_shift($row);
    array_unshift($row, $entity->bundle());
    array_unshift($row, $first);
    return $row;
  }
}
class MetaobjectTypeController extends EntityAPIControllerExportable {}
class MetaobjectType extends Entity {}
class MetaobjectTypeUIController extends EntityDefaultUIController {
  /**
   * Overrides hook_menu() defaults.
   */
  public function hook_menu() {
    $items = parent::hook_menu();
    $items[$this->path]['description'] = 'Manage metaobject entity types, including adding and removing fields and the display of fields.';
    $items[$this->path]['type'] = MENU_NORMAL_ITEM;
    // @todo Describe what is it for.
    $wildcard = isset($this->entityInfo['admin ui']['menu wildcard']) ? $this->entityInfo['admin ui']['menu wildcard'] : '%entity_object';
    $items["{$this->path}/manage/{$wildcard}/edit"]['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
    return $items;
  }
}

/**
 * Create a metaobject type object.
 *\/ @todo Remove it.
function patch_manager_metaobject_type_create($values = array()) {
  return entity_get_controller('patch_manager_metaobject_type')->create($values);
}
 *
 */

/**
 * Implements hook_default_metaobject_configuration().
 */
function patch_manager_default_metaobject_configuration() {
  // @todo Create default meta configuration.
  $meta_object_configs = array();
  return $meta_object_configs;
}

function patch_manager_metaobject_access() {
  // @todo Implement better access handling.
  return TRUE;
}

function patch_manager_metaobject_type_access() {
  // @todo Implement better access handling.
  return TRUE;
}

/**
* Generates the metaobject editing form.
*/
function patch_manager_metaobject_form($form, &$form_state, $metaobject, $op = 'edit') {
  if ($op == 'clone') {
    $metaobject->label .= ' (cloned)';
    $metaobject->name .= '_clone';
  }
  // @todo Remove label for Method metaobject, leave for Module.
  $form['label'] = array(
    '#title' => t('Label'),
    '#type' => 'textfield',
    '#default_value' => isset($metaobject->label) ? $metaobject->label : '',
  );
  // Machine-readable application id.
  $form['name'] = array(
    '#type' => 'machine_name',
    '#default_value' => isset($metaobject->name) ? $metaobject->name : '',
    '#machine_name' => array(
      'exists' => 'patch_manager_get_metaobjects',
      'source' => array('label'),
    ),
    '#description' => t('A unique machine-readable name for this metaobject. It must only contain lowercase letters, numbers, and underscores.'),
  );
  // Add other fields.
  field_attach_form('patch_manager_metaobject', $metaobject, $form, $form_state);
  // Add submit button.
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save metaobject'),
    '#weight' => 40,
  );
  return $form;
}

/**
* Generates the metaobject type editing form.
*/
function patch_manager_metaobject_type_form($form, &$form_state, $metaobject_type, $op = 'edit') {
  if ($op == 'clone') {
    $metaobject_type->label .= ' (cloned)';
    $metaobject_type->name .= '_clone';
  }
  $form['label'] = array(
    '#title' => t('Label'),
    '#type' => 'textfield',
    '#default_value' => isset($metaobject_type->label) ? $metaobject_type->label : '',
  );
  // Machine-readable application id.
  $form['type'] = array(
    '#type' => 'machine_name',
    '#default_value' => isset($metaobject_type->type) ? $metaobject_type->type : '',
    // @todo ?Do we need it?
    //'#disabled' => $application->isLocked(),
    '#machine_name' => array(
      'exists' => 'patch_manager_get_metaobject_types',
      'source' => array('label'),
    ),
    '#description' => t('A unique machine-readable name for this metaobject type. It must only contain lowercase letters, numbers, and underscores.'),
  );
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save metaobject type'),
    '#weight' => 40,
  );
  return $form;
}

function patch_manager_get_metaobjects($metaobject_name = NULL) {
  // @todo Implement existence check.
  return array();
}

/**
 * Get metaobject types.
 *
 * @param $metaobject_type_name
 *   The machine-readable name of a entityform type to load. If NULL - loads all.
 * @param boolean $reset
 *   Whether to reset or not cached metaobject types.
 * @return
 *   A metaobject type array, single metaobject type or FALSE if metaobject type
 *   called $metaobject_type_name does not exist.
 */
function patch_manager_get_metaobject_types($metaobject_type_name = NULL, $reset = FALSE) {
  // entity_load will get the Entity controller for our entityform entity and call the load
  // function of that object - we are loading entities by name here.
  $metaobject_types = &drupal_static(__FUNCTION__, array(), $reset);
  if (empty($metaobject_types) || (isset($metaobject_type_name) && empty($metaobject_types[$metaobject_type_name]))) {
    if (!isset($metaobject_type_name)) {
      $metaobject_types = entity_load_multiple_by_name('patch_manager_metaobject_type', FALSE);
    }
    else {
      $types = entity_load_multiple_by_name('patch_manager_metaobject_type', array($metaobject_type_name));
      if (empty($types)) {
        return FALSE;
      }
      // @todo Describe why it is necessary.
      $metaobject_types[$metaobject_type_name] = array_shift($types);
    }
  }
  return isset($metaobject_type_name) ? $metaobject_types[$metaobject_type_name] : $metaobject_types;
}

/**
* Form API submit callback for the metaobject form.
*/
function patch_manager_metaobject_form_submit(&$form, &$form_state) {
  $metaobject = entity_ui_form_submit_build_entity($form, $form_state);
  // Save and go back.
  $metaobject->save();
  $form_state['redirect'] = 'admin/structure/metaobjects';
}

/**
* Form API submit callback for the metaobject type form.
*/
function patch_manager_metaobject_type_form_submit(&$form, &$form_state) {
  $metaobject_type = entity_ui_form_submit_build_entity($form, $form_state);
  // Save and go back.
  $metaobject_type->save();
  $form_state['redirect'] = 'admin/structure/metaobject_types';
}

/**
 * Implements hook_admin_menu_map().
 */
function patch_manager_admin_menu_map() {
  $map = array();
  if (!user_access('administer metaobjects')) {
    return;
  }
  // As Node does for Content Types.
  // @see node_admin_menu_map()
  $map['admin/structure/metaobject_types/manage/%entity_type'] = array(
    'parent' => 'admin/structure/metaobject_types',
    'arguments' => array(
      array('%entity_type' => array_keys(patch_manager_get_metaobject_types())),
    ),
  );
  // As Field UI does.
  // @see field_ui_admin_menu_map()
  // Invoke general function to gather all alterations.
  foreach (entity_get_info() as $obj_type => $info) {
    if (in_array($obj_type, array_keys(patch_manager_entity_info()))) {
      $arguments = array();
      foreach ($info['bundles'] as $bundle_name => $bundle_info) {
        if (isset($bundle_info['admin'])) {
          $fields = array();
          foreach (field_info_instances($obj_type, $bundle_name) as $field) {
            $fields[] = $field['field_name'];
          }
          $arguments = array(
            '%entity_type' => array($bundle_name),
            '%field_ui_menu' => $fields,
          );
          $path = $bundle_info['admin']['path'];
          $map["$path/fields/%field_ui_menu"]['parent'] = "$path/fields";
          $map["$path/fields/%field_ui_menu"]['arguments'][] = $arguments;
        }
      }
    }
  }
  return $map;
}
